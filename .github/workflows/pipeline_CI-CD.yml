name: Pipeline CI/CD

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Version Image Docker'
        required: true

jobs:
  
  # Build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up JDK 11
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '11'
  #       distribution: 'temurin'
  #       cache: maven
  #   - name: Build with Maven
  #     run: mvn clean install
  
  # SonarQube:
  #   needs: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 11
  #     - name: Cache SonarCloud packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.sonar/cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar
  #     - name: Cache Maven packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2
  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=11Victor_DjRIcardo-BackEnd
  
  # DockerHub:
  #   needs: [Build, SonarQube]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up JDK 11
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '11'
  #       distribution: 'temurin'
  #       cache: maven
  #   - name: Build with Maven
  #     run: mvn clean install

  #   - name: Build & push Docker image - DockerHub
  #     uses: mr-smithers-excellent/docker-build-push@v5
  #     with:
  #       image: ${{ secrets.DOCKER_USERNAME }}/dj_ricardo
  #       tags: latest, ${{ github.event.inputs.tags }}
  #       registry: docker.io
  #       dockerfile: Dockerfile
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  AWS-ECS:
    # needs: [Build, SonarQube]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: djricardo
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true  

    